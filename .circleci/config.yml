version: 2
jobs:

  # Run tests.
  Test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    steps:
      - checkout
      - run: pyenv global 3.6.5
      - restore_cache:
          keys:
            - test-dependencies-{{ checksum "setup.py" }}
            # fallback to using the latest cache if no exact match is found
            - test-dependencies-
      - run: sudo add-apt-repository -y ppa:migurski/planscore
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y libgeos-c1v5=3.5.1-3~xenial0 libgdal20=2.2.2+dfsg-1~xenial1 libgdal-dev=2.2.2+dfsg-1~xenial1 libspatialindex-dev
      - run: CPLUS_INCLUDE_PATH=/usr/include/gdal C_INCLUDE_PATH=/usr/include/gdal pip3 install "GDAL <= `gdal-config --version`"
      - run: pip3 install 'numpy < 2'
      - run: pip3 install .
      - save_cache:
          paths:
            - /opt/circleci/.pyenv
          key: test-dependencies-{{ checksum "setup.py" }}
      - run: python3 setup.py test
      - run: NODE_PATH=`pwd` node tests.js
      - run: make planscore/website/build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - planscore/website/build
  
  # Prepare Lambda package for use in Deploy step.
  # Optimistically prepares images in parallel with Test step.
  Build:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    steps:
      - checkout
      - run: pyenv global 3.6.5
      - restore_cache:
          keys:
            - build-dependencies-{{ checksum "setup.py" }}-{{ checksum "Makefile" }}
      - run: make planscore-lambda.zip
      - save_cache:
          paths:
            - ~/.cache/pip
          key: build-dependencies-{{ checksum "setup.py" }}-{{ checksum "Makefile" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - planscore-lambda.zip
            - gdal-geos-python.tar.gz
  
  # Deploy to Lambda using package from Build step.
  Deploy:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    steps:
      - checkout
      - run: pyenv global 3.6.5
      - run: pip install boto3
      - attach_workspace:
          at: ~/repo
      - run: make live-lambda
      - run: make live-website
  
  # CDK will replace Deployment
  Synth:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/repo
    steps:
      - run: npm install -g aws-cdk
      - run: pip3 install aws-cdk.core aws-cdk.aws-s3 aws-cdk.aws-lambda
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: cdk deploy --require-approval never

workflows:
  version: 2
  everything:
    jobs:
      - Test
      - Build:
          filters:
            branches:
              only:
                - main
                - migurski/attempt-cdk
      - Deploy:
          requires:
            - Test
            - Build
          filters:
            branches:
              only: main
      - Synth:
          requires:
            - Test
            - Build
          filters:
            branches:
              only: migurski/attempt-cdk
